Index: linux-4.4.60-qsdk-11f09717303ecd83c3a64e9efe23f25921dc1016/drivers/mtd/devices/block2mtd.c
===================================================================
--- linux-4.4.60-qsdk-11f09717303ecd83c3a64e9efe23f25921dc1016.orig/drivers/mtd/devices/block2mtd.c
+++ linux-4.4.60-qsdk-11f09717303ecd83c3a64e9efe23f25921dc1016/drivers/mtd/devices/block2mtd.c
@@ -26,12 +26,14 @@
 #include <linux/list.h>
 #include <linux/init.h>
 #include <linux/mtd/mtd.h>
-#include <linux/mtd/partitions.h>
 #include <linux/mutex.h>
 #include <linux/mount.h>
 #include <linux/slab.h>
 #include <linux/major.h>
 
+/* Maximum number of comma-separated items in the 'block2mtd=' parameter */
+#define BLOCK2MTD_PARAM_MAX_COUNT 3
+
 /* Info for the block device */
 struct block2mtd_dev {
 	struct list_head list;
@@ -49,7 +51,6 @@
 {
 	return read_mapping_page(mapping, index, NULL);
 }
-char parent_mtd_name[80];
 
 /* erase a specified part of the device */
 static int _block2mtd_erase(struct block2mtd_dev *dev, loff_t to, size_t len)
@@ -97,29 +98,15 @@
 	if (err) {
 		pr_err("erase failed err = %d\n", err);
 		instr->state = MTD_ERASE_FAILED;
-	} else
+	} else {
 		instr->state = MTD_ERASE_DONE;
+	}
 
 	mtd_erase_callback(instr);
 	return err;
 }
 
 
-static int block2mtd_read_oob(struct mtd_info *mtd, loff_t from,
-			 struct mtd_oob_ops *ops)
-{
-	struct mtd_info *parent_mtd;
-	int ret = 0;
-	char *ptr_mtd_name = parent_mtd_name;
-
-	if (ptr_mtd_name) {
-		parent_mtd = get_mtd_device_nm(ptr_mtd_name);
-		ret = mtd_read_oob(parent_mtd, from, ops);
-	}
-
-	return ret;
-}
-
 static int block2mtd_read(struct mtd_info *mtd, loff_t from, size_t len,
 		size_t *retlen, u_char *buf)
 {
@@ -234,23 +221,9 @@
 	kfree(dev);
 }
 
-static int block2mtd_isbad(struct mtd_info *mtd, loff_t from)
-{
-	struct mtd_info *parent_mtd;
-	int ret = 0;
-	char *ptr_mtd_name = parent_mtd_name;
-
-	if (ptr_mtd_name) {
-
-		parent_mtd = get_mtd_device_nm(ptr_mtd_name);
-		ret = mtd_block_isbad(parent_mtd, from);
-	}
-
-	return ret;
-}
 
 static struct block2mtd_dev *add_device(char *devname, int erase_size,
-		const char *mtdname, int timeout)
+		char *label, int timeout)
 {
 #ifndef MODULE
 	int i;
@@ -258,7 +231,6 @@
 	const fmode_t mode = FMODE_READ | FMODE_WRITE | FMODE_EXCL;
 	struct block_device *bdev = ERR_PTR(-ENODEV);
 	struct block2mtd_dev *dev;
-	struct mtd_partition *part;
 	char *name;
 
 	if (!devname)
@@ -315,16 +287,16 @@
 
 	/* Setup the MTD structure */
 	/* make the name contain the block device in */
-	if (!mtdname)
-		mtdname = devname;
-	name = kmalloc(strlen(mtdname) + 1, GFP_KERNEL);
+	if (!label)
+		name = kasprintf(GFP_KERNEL, "block2mtd: %s", devname);
+	else
+		name = kstrdup(label, GFP_KERNEL);
 	if (!name)
 		goto err_destroy_mutex;
 
-	strcpy(name, mtdname);
 	dev->mtd.name = name;
 
-	dev->mtd.size = dev->blkdev->bd_inode->i_size & PAGE_MASK & ~(erase_size - 1);
+	dev->mtd.size = dev->blkdev->bd_inode->i_size & PAGE_MASK;
 	dev->mtd.erasesize = erase_size;
 	dev->mtd.writesize = 1;
 	dev->mtd.writebufsize = PAGE_SIZE;
@@ -334,16 +306,10 @@
 	dev->mtd._write = block2mtd_write;
 	dev->mtd._sync = block2mtd_sync;
 	dev->mtd._read = block2mtd_read;
-	dev->mtd._block_isbad = block2mtd_isbad;
-	dev->mtd._read_oob = block2mtd_read_oob;
 	dev->mtd.priv = dev;
 	dev->mtd.owner = THIS_MODULE;
 
-	part = kzalloc(sizeof(struct mtd_partition), GFP_KERNEL);
-	part->name = name;
-	part->offset = 0;
-	part->size = dev->mtd.size;
-	if (mtd_device_register(&dev->mtd, part, 1)) {
+	if (mtd_device_register(&dev->mtd, NULL, 0)) {
 		/* Device didn't get added, so free the entry */
 		goto err_destroy_mutex;
 	}
@@ -351,7 +317,8 @@
 	list_add(&dev->list, &blkmtd_device_list);
 	pr_info("mtd%d: [%s] erase_size = %dKiB [%d]\n",
 		dev->mtd.index,
-		mtdname, dev->mtd.erasesize >> 10, dev->mtd.erasesize);
+		label ? label : dev->mtd.name + strlen("block2mtd: "),
+		dev->mtd.erasesize >> 10, dev->mtd.erasesize);
 	return dev;
 
 err_destroy_mutex:
@@ -421,14 +388,12 @@
 
 static int block2mtd_setup2(const char *val)
 {
-	/*
-	 * 80 for device, 12 for erase size, 80 for name,
-	 * 80 for parent mtd device name 8 for timeout.
-	 */
-	char buf[80 + 12 + 80 + 80 + 8];
+	/* 80 for device, 12 for erase size, 80 for name, 8 for timeout */
+	char buf[80 + 12 + 80 + 8];
 	char *str = buf;
-	char *token[5];
+	char *token[BLOCK2MTD_PARAM_MAX_COUNT];
 	char *name;
+	char *label = NULL;
 	size_t erase_size = PAGE_SIZE;
 	unsigned long timeout = MTD_DEFAULT_TIMEOUT;
 	int i, ret;
@@ -441,7 +406,7 @@
 	strcpy(str, val);
 	kill_final_newline(str);
 
-	for (i = 0; i < 5; i++)
+	for (i = 0; i < BLOCK2MTD_PARAM_MAX_COUNT; i++)
 		token[i] = strsep(&str, ",");
 
 	if (str) {
@@ -460,23 +425,21 @@
 		return 0;
 	}
 
-	if (token[1]) {
+	/* Optional argument when custom label is used */
+	if (token[1] && strlen(token[1])) {
 		ret = parse_num(&erase_size, token[1]);
 		if (ret) {
 			pr_err("illegal erase size\n");
 			return 0;
 		}
 	}
-	if (token[2] && (strlen(token[2]) + 1 > 80))
-		pr_err("mtd device name too long\n");
 
-	if (token[3] && (strlen(token[3]) + 1 > 80))
-		pr_err("parent mtd device name too long\n");
+	if (token[2]) {
+		label = token[2];
+		pr_info("Using custom MTD label '%s' for dev %s\n", label, name);
+	}
 
-	if (token[4] && kstrtoul(token[4], 0, &timeout))
-		pr_err("invalid timeout\n");
-	strlcpy(parent_mtd_name, token[3], sizeof(parent_mtd_name));
-	add_device(name, erase_size, token[2], timeout);
+	add_device(name, erase_size, label, timeout);
 
 	return 0;
 }
@@ -510,7 +473,7 @@
 
 
 module_param_call(block2mtd, block2mtd_setup, NULL, NULL, 0200);
-MODULE_PARM_DESC(block2mtd, "Device to use. \"block2mtd=<dev>[,<erasesize>[,<name>[,<timeout>]]]\"");
+MODULE_PARM_DESC(block2mtd, "Device to use. \"block2mtd=<dev>[,[<erasesize>][,<label>]]\"");
 
 static int __init block2mtd_init(void)
 {
